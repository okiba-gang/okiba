{% macro ps(params) %}
{%- for param in params -%}
  {{param.name}}
  {%- if not loop.last -%}, {% endif -%}
  {%- if param.subparams %}: {% raw %}{{% endraw %}{{ ps(param.subparams) }}{% raw %}}{% endraw %}
  {%- endif -%}
{%- endfor -%}
{% endmacro %}

# Okiba / {{ name }}
{{ description }}

__

{% if examples %}
{% for example in examples %}
```javascript
{{example}}
```
{% endfor %}
{% endif %}

### Installation

```bash
npm i --save @okiba/{{pkgName}}
```

Or import it directly in the browser
```html
<script type="module" src="https://unpkg.com/@okiba/{{pkgName}}/index.js"></script>
```

## Usage

```javascript
import {{name}} from '@okiba/{{pkgName}}'
```

#### Untranspiled code ðŸ›‘
Okiba Core packages are not transpiled, so _don't forget to transpile them with your favourite bundler_.
For example, using Babel with Webpack, you should prevent imports from okiba to be excluded from transpilation, like follows:

```javascript
{
  test: /\.js$/,
  exclude: /node_modules\/(?!(@okiba)\/).*/,
  use: {
    loader: 'babel-loader',
    options: {
      presets: ['@babel/preset-env']
    }
  }
}
```

{% if submodules %}
### Submodules:
{% for s in submodules %}
#### [{{s.name}}]({{s.url}})
{{s.description}}
{% if s.members %}
###### {% for sm in s.members -%}
[`{{ sm.name }}`]({{ s.url }}){%- if not loop.last %}, {% endif -%}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}


{% if todo %}
#### Todo:
{% for t in todo %}
+ {{t}}
{%- endfor %}
{% endif %}

{% for member in members -%}
{% if member.kind == 'class' or member.name == name %}
## constructor({{ps(member.params)}})
{% else %}
## {{member.name}}({{ps(member.params)}})
{% endif %}

{% include "./bin/readme/partials/describe.njk" %}
{%- endfor -%}
